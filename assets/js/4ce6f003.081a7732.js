"use strict";(self.webpackChunkrushstack_io=self.webpackChunkrushstack_io||[]).push([[23671],{50158:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return m}});var a=r(46393);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},p=Object.keys(e);for(a=0;a<p.length;a++)r=p[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(a=0;a<p.length;a++)r=p[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var o=a.createContext({}),u=function(e){var t=a.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,p=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(r),m=n,f=d["".concat(o,".").concat(m)]||d[m]||s[m]||p;return r?a.createElement(f,l(l({ref:t},c),{},{components:r})):a.createElement(f,l({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var p=r.length,l=new Array(p);l[0]=d;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var u=2;u<p;u++)l[u]=r[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},97692:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return o},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var a=r(61731),n=r(70396),p=(r(46393),r(50158)),l=["components"],i={hide_title:!0,custom_edit_url:null,pagination_prev:null,pagination_next:null},o=void 0,u={unversionedId:"pages/api/tree-pattern",id:"pages/api/tree-pattern",title:"tree-pattern",description:"Home &gt; @rushstack/tree-pattern",source:"@site/docs/pages/api/tree-pattern.md",sourceDirName:"pages/api",slug:"/pages/api/tree-pattern",permalink:"/pages/api/tree-pattern",editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,custom_edit_url:null,pagination_prev:null,pagination_next:null},sidebar:"apiSidebar"},c=[{value:"tree-pattern package",id:"tree-pattern-package",children:[],level:2},{value:"Classes",id:"classes",children:[],level:2},{value:"Type Aliases",id:"type-aliases",children:[],level:2}],s={toc:c};function d(e){var t=e.components,r=(0,n.Z)(e,l);return(0,p.kt)("wrapper",(0,a.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("p",null,(0,p.kt)("a",{parentName:"p",href:"/pages/api/"},"Home")," ",">"," ",(0,p.kt)("a",{parentName:"p",href:"/pages/api/tree-pattern"},"@rushstack/tree-pattern")),(0,p.kt)("h2",{id:"tree-pattern-package"},"tree-pattern package"),(0,p.kt)("p",null,"A fast, lightweight pattern matcher for tree structures such as an Abstract Syntax Tree (AST)."),(0,p.kt)("h2",{id:"classes"},"Classes"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:null},"Class"),(0,p.kt)("th",{parentName:"tr",align:null},"Description"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("a",{parentName:"td",href:"/pages/api/tree-pattern.treepattern"},"TreePattern")),(0,p.kt)("td",{parentName:"tr",align:null},"A fast, lightweight pattern matcher for tree structures such as an Abstract Syntax Tree (AST).")))),(0,p.kt)("h2",{id:"type-aliases"},"Type Aliases"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:null},"Type Alias"),(0,p.kt)("th",{parentName:"tr",align:null},"Description"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("a",{parentName:"td",href:"/pages/api/tree-pattern.itreepatterncaptureset"},"ITreePatternCaptureSet")),(0,p.kt)("td",{parentName:"tr",align:null},"Provides additional detail about the success or failure of ",(0,p.kt)("a",{parentName:"td",href:"/pages/api/tree-pattern.treepattern.match"},"TreePattern.match()")," .")),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("a",{parentName:"td",href:"/pages/api/tree-pattern.treenode"},"TreeNode")),(0,p.kt)("td",{parentName:"tr",align:null},"Indicates the tree-like data structure that ",(0,p.kt)("a",{parentName:"td",href:"/pages/api/tree-pattern.treepattern"},"TreePattern")," will traverse.")))))}d.isMDXComponent=!0}}]);